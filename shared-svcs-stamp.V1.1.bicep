targetScope = 'resourceGroup'

/*** PARAMETERS ***/
@description('The regional resource group name for Region 1')
param resourceGroupNameRegion1 string

@description('The regional resource group name for Region 2')
param resourceGroupNameRegion2 string

@description('The Application Gateway resource name in Region 1')
param appGwResourceNameRegion1 string

@description('The Application Gateway resource name in Region 2')
param appGwResourceNameRegion2 string

/*** VARIABLES ***/

var subRgUniqueString = uniqueString('aks', subscription().subscriptionId, resourceGroup().id)
var frontDoorName = 'bicycle${subRgUniqueString}'

/*** EXISTING RESOURCES ***/

// Spoke resource group
resource targetResourceGroupRegion1 'Microsoft.Resources/resourceGroups@2024-03-01' existing = {
  scope: subscription()
  name: resourceGroupNameRegion1
}

// Spoke resource group
resource targetResourceGroupRegion2 'Microsoft.Resources/resourceGroups@2024-03-01' existing = {
  scope: subscription()
  name: resourceGroupNameRegion2
}

// Private Application Gateway in Region 1
resource appGwRegion1 'Microsoft.Network/applicationGateways@2023-11-01' existing = {
  scope: targetResourceGroupRegion1
  name: appGwResourceNameRegion1
}

// Private Application Gateway in Region 1
resource appGwRegion2 'Microsoft.Network/applicationGateways@2023-11-01' existing = {
  scope: targetResourceGroupRegion2
  name: appGwResourceNameRegion2
}

@description('WAF policy for Front Door (Premium).')
resource frontDoorWafPolicy 'Microsoft.Network/FrontDoorWebApplicationFirewallPolicies@2024-02-01' existing = {
  name: 'policyfd${subRgUniqueString}'
}

/*** RESOURCES ***/

@description('Front Door Profile (Premium) to be our global router.')
resource frontDoorProfile 'Microsoft.Cdn/profiles@2024-02-01' = {
  name: 'afd-profile'
  location: 'global'
  sku: {
    name: 'Premium_AzureFrontDoor'
  }

  resource endpoint 'afdEndpoints' = {
    name: frontDoorName
    location: 'global'
    properties: {
      autoGeneratedDomainNameLabelScope: 'TenantReuse'
      enabledState: 'Enabled'
    }

    resource frontDoorRoute 'routes' = {
      name: '${frontDoorName}-route'
      dependsOn: [
        frontDoorOriginGroup::frontDoorOriginRegion1
        frontDoorOriginGroup::frontDoorOriginRegion2
      ]
      properties: {
        originGroup: {
          id: frontDoorOriginGroup.id
        }
        supportedProtocols: [
          'Https'
        ]
        patternsToMatch: [
          '/*'
        ]
        forwardingProtocol: 'HttpsOnly'
        linkToDefaultDomain: 'Enabled'
        httpsRedirect: 'Enabled'
        enabledState: 'Enabled'
      }
    }
  }

  resource secPolicies 'securityPolicies' ={
    name: 'afd-sec-policies'
    properties: {
      parameters: {
        type: 'WebApplicationFirewall'
        wafPolicy: {
          id: frontDoorWafPolicy.id
        }
        associations: [
          {
            domains: [
              {
                id: endpoint.id
              }
            ]
            patternsToMatch: [
              '/*'
            ]
          }
        ]
      }
    }
  }

  resource frontDoorOriginGroup 'originGroups' = {
    name: 'afd-origingroup-private'
    properties: {
      loadBalancingSettings: {
        sampleSize: 4
        successfulSamplesRequired: 2
      }
      healthProbeSettings: {
        probePath: '/favicon.ico'
        probeRequestType: 'HEAD'
        probeProtocol: 'Https'
        probeIntervalInSeconds: 30
      }
    }

    resource frontDoorOriginRegion1 'origins' = {
      name: 'afd-origin-Region1'
      properties: {
        hostName: appGwRegion1.properties.httpListeners[0].properties.hostName
        originHostHeader: appGwRegion1.properties.httpListeners[0].properties.hostName
        httpPort: 80
        httpsPort: 443
        priority: 1
        weight: 50
        enabledState: 'Enabled'
        sharedPrivateLinkResource: {
          groupId: appGwRegion1.properties.frontendIPConfigurations[0].name
          privateLink: {
            id: appGwRegion1.id
          }
          privateLinkLocation: appGwRegion1.location
          requestMessage: 'Private link service from Front Door to AppGw in Region 1'
        }
      }
    }

    resource frontDoorOriginRegion2 'origins' = {
      name: 'afd-origin-Region2'
      properties: {
        hostName: appGwRegion2.properties.httpListeners[0].properties.hostName
        originHostHeader: appGwRegion2.properties.httpListeners[0].properties.hostName
        httpPort: 80
        httpsPort: 443
        priority: 1
        weight: 50
        enabledState: 'Enabled'
        sharedPrivateLinkResource: {
          groupId: appGwRegion2.properties.frontendIPConfigurations[0].name
          privateLink: {
            id: appGwRegion2.id
          }
          privateLinkLocation: appGwRegion2.location
          requestMessage: 'Private link service from Front Door to AppGw in Region 2'
        }
      }
    }
  }
}

/*** OUTPUTS ***/
